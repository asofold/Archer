Archer - lists
-----------------------------------------------------------------

Add features for target practice with arrows on signs!


Features
-----------------------------------------------------------------

Target signs:
- Set up a sign with certain configurable content, 
    which then serves as target practice for archers.
    Default lines (no spaces, small letters):
    ooooo
    ooxxxoo
    ooxxxoo
    ooooo
- Give a target a name with the fourth line ">>NAME<<", or by
    delegating to a sign attached to the same block with the
    fourth line "^^^^^" (configurable).
- Receive information about players hitting targets by chat,
    including distance off target and shooting distance.
- Only players that subscribe explicitly can receive or generate 
    notifications.
- Configure various aspects, such as target center offset, 
    maximum distance off target, maximum notification distance,
    cross world notification... 

TODO: ADDED: Contests.

Commands and Permissions
-----------------------------------------------------------------
(command, permission, description)
- /archer reload 
    archer.reload
    To reload the settings.
- /archer notify
    archer.notify
    Toggle if to take part in the notifications about hitting target signs.

TODO: ADDED: /archer contest (archer.cmd.contest.join|leave)

Shortcut permissions:

- archer.normaluser
    Allows to use /notify and contest+join|leave.
    No creation or editing of contests.

Configuration
-----------------------------------------------------------------
- target.lines: A list of 4 string entries for the lines of a target sign.
    Use § for color codes.
- target.trim: Disregard leading or trailing white space for comparison
    of target sign lines.
- target.strip-color: Disregard chat color for comparison of target signs.
- target.ignore-case: Disregard letter case for comparison of target signs.
- target.name.prefix|suffix: Define wrapping of fourth line for target sign
    naming, with default settings ">>Target 1<<" would be the name "Target 1".
    They can be set to "" or '' in order to not use prefix and/or suffix.
    Setting both to "" or '' would prevent naming target signs, currently.
- target.name.delegator: Fourth line indicating that a sign with target name
    in the fourth line (with prefix and/or suffix) should be looked for,
    starting of the block the hit target sign is attached to. The search
    order will be straight, then counter-clockwise.
- shooter.distance.min|max: Minimum/maximum distance that can lead to
    notifications about hitting target signs. 
    Set to 0 to deactivate.
- notify.distance: Maximum distance to target sign, at which to notify
    players about hits.
    Set to 0 to deactivate.
- notify.cross-world: If to notify players that are in a differing world.
- off-target.divisor: Target accuracy is displayed up to 1000 parts of 
    the maximum distance off center, the divisor lets you sort hits
    into categories of lower numbers.
- off-target.distance: Maximum distance off target.
- offset: x,y,z for target center offset. 
    (x,z would not make any sense, if signs are not always placed
        in the same n-w-s-e orientation!)
- step: This is the step length for finding a more accurate hitting
    position, the arrow can be up to its speed away from target,
    as by current CraftBukkit implementation (roughly up to 3).
- verbose: If true, this will output some details about shots to
    the console.
- permissions.use: If to use superperms - if set to false,
    players can use the normal functions without permission checks.
    TODO: REMOVED: permissions.use
- players.expire-offline: Duration in minutes after which offline 
    player data / notification state expire.
    Set to 0 to never expire data (until restart/reload).


TODO: Contest configuration (contests.yml).
        Sub-sections with arbitrary keys.
        Will be the same properties as with "contest edit" or 
        "contest inspect", when using tab completion,
        except for name and owner (name must be set, not '*').

Method
-----------------------------------------------------------------
For target signs:
1. The player location when shooting decides about the target distance,
    of course the distance will only be calculated when hitting a target.
    (One could use the arrow spawn location, but standing in one spot,
     would now not change the distance.)
2. Internally the arrow location for hitting a block, which is passed to
    plugins can be off by roughly the speed of the arrow, so a step wise
    checking for air is done, the first non air block will be considered
    as hit.
3. If a sign with the predefined content is found:
    A correction of the exact hitting location is calculated, to get the
    location where the arrow hits the plane where the sign is attached to.


Planning
-----------------------------------------------------------------

*** Features
!(add) Contest !
?(add) notify greedy option: get all archer events from all worlds and distances
!(add) Individual target settings to be set in-game, including target names.
!(add) Allow other blocks than air to be passed for step calculation.
!(add) Create target sign option.
?(add) Something for multiple targets, including position correction (corrected off block...).
!(add) Option to remove arrows.
!(add) Option to refund arrows.
!(add) Option to name target signs on sign (4th line ?).
!(add) Always notify the shooter.

*** Optimization
!(refactor) To use settings objects (especially to differentiate signs from other targets later).
?(add) Auto unsubscribe (if not received or generated a notification for some time). [Could be problematic] 
?(add) configurable or not: use projectile location as reference not the player location (!)
!(add) Target block finding (more precise, even: calculate block transitions directly).
!(consider) Arrow length + position offset: Use direction of arrow to estimate hit distance from the sign,
    use a different projection.  
!(add) Option to forget PlayerData for players that logged out for longer than a certain amount of time. 

*** API
!(add) Events: hit, miss, shoot


STACK
-----------------------------------------------------------------

? consider: option to pop delegating sings that could not find name. 

!(add) statistics about hits (angle, distance + off categorized somehow ?)
!(add) Angle towards aim + restrictions

*** categorize / sort in :
? step: check if is longer than l first !

?opt: getHitPos: use coordinates and only get the block if block really changed 

!(add) Contests with variable parameters: /archer contest create myconstest123 bestof3 mindist=20
!(add) Configurable contests, that players can subscribe to (number of shots, max-fail, way of counting, target-names/positions).

!(add) configurable hit message:  player name, display name, shooting distance, off target, arrow speed (!), ?arrow initial speed, target coordinates? ! 
!(add) confine to certain targets (only hitting those counts) [later: contest defines confine + side conditions]

*** NEXT RELEAS

* Consistency
- Add a timeout for stored arrows and check them now and then (chunk unloading, etc.). Needs storing the time.
- Set player to null on logout/kick ?
- Make use of getLocation(Location) to better keep track of changed locations (later mainly, but also on join !).

* Contests

Allow other than arrows ? [configurable: entity types]

implement timestamp checking to prevent spamming join+leave

! add flag + permission and/or property for persisting a newly created contest.

- Contest framework. At first global, but design for worlds and location-specific (worldguard add-in).
- Command structure: list contests, join or leave one or all.
    - contest [info [<contest>|*]] <- list all contests and contests that are active fro oneself
    - contest info <contest> <- Specific rules info, including players in.
    - contest leave|join [<contest>|*]
    - contest create <contest> [...specific type info...]
    - contest edit <contest> <property> <...specific value(s)...>
- hits, hits_taken, "health", score - health gets decreased by the score the shooter gets (self hits don't add to score, but health).
- score consists of something like speed x distance.
- Possible ends: player death, health depleted, hits_taken max reached, hits reached, score reached, world change, player leaves, ...
- Rewards (...)


***

message scheduler...

summaries...

move iterations over cd to contestmanager (iterator...)

allow remove players while not started on world change /  disconnect (!).



start contest + notify 

... command to automatically set lines for a placed sign.
... contest logic + notifications [change notify to also display if contests are available]
... contest join + leave commands

might have to remember force too for projectile launch [could do that anyway (future!)]

check if contest is active at all (in more places !?).

print sign lines on /archer ?


***

perms: admin, ?manager, *editor (+.own), some parent nodes.

run once contests (+ other perms for commands to alter this etc.)

might make some permission defaults editable (?add annotations or add generic permission setup routine (not plugin.yml or redundant)
    permissions: base-default: op, normaluser-default: true, adsmin-defualt, manager-default.

? away to show specific context settings (context inspect ...?)

constest lock and unlock ?

? allow multiple worlds for a contest ?
? contest save command ?
!contest create (!also from console, permission for creating more than one, permission for creating in other worlds, permission for all worlds, permission for certain worlds)
!contest add contest players... (for use from console), allow to add at runtime / anytime [owner perm + general perm]


!contest edit contest property value. [show if property is different than selected + (allow edit world as well) + owner/general perms]
    sub perms for properties.

add sub command usage (...)